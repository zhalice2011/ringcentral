{"version":3,"sources":["constants/message.ts","components/messages/MSGImage.tsx","components/messages/MSGText.tsx","components/messages/MSGLink.tsx","components/messages/MSGVideo.tsx","components/messages/MSGSystemNotification.tsx","components/messages/MSGStyleWrapper.tsx","components/common/Avatar.tsx","components/messages/MSGContainer.tsx","components/messages/index.ts","components/wechat-panel/WeChatPanelContent.tsx","components/common/Icon.tsx","components/common/Input.tsx","components/wechat-panel/WeChatPanelFooter.tsx","components/common/Text.tsx","components/wechat-panel/WeChatPanelTitle.tsx","mock/mockData.ts","components/wechat-panel/WeChatPanel.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["MESSAGE_TYPE","MESSAGE_ADDON_TYPE","MESSAGE_STATUS","ROLE","MSGImage","props","url","style","width","src","Wrapper","styled","section","reg","MSGText","content","console","log","a","replace","array","split","map","v","index","URL","str","RegExp","test","isUrl","href","margin","color","cursor","key","MSGLink","className","MSGVideo","controls","MSGSystemNotification","SystemWrapper","div","ReceiverWrapper","SenderWrapper","Avatar","author","bgStyle","thumbnail","background","height","borderRadius","name","substring","MSGContainer","message","TargetMsgClass","msg","type","model","TEXT","IMAGE","SYSTEM","VIDEO","MODEL","modelType","GRAPHIC","getTargetMsgClass","TargetWrapper","role","RECEIVER","SENDER","getTargetWrapper","cls","getTargetWrapperCls","marginBottom","WeChatPanelContent","messages","id","Icon","Input","onPressEnter","restProps","onKeyPress","e","target","value","WeChatPanelFooter","onAddMessage","useState","setContent","onChange","Math","ceil","random","generateTextMessage","marginRight","Text","children","WeChatPanelTitle","status","LOADING","FAILED","upvote","downvote","title","desc","WeChatPanel","mockData","setMessages","contentRef","useRef","ref","padding","overflowY","concat","setTimeout","current","scrollTop","scrollHeight","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.10106c00.chunk.js","sourcesContent":["export enum MESSAGE_TYPE {\n    TEXT = 'TEXT',\n    VIDEO = 'VIDEO',\n    IMAGE = 'IMAGE',\n    SYSTEM = 'SYSTEM',\n    MODEL = 'MODEL',\n}\n\nexport enum MESSAGE_ADDON_TYPE {\n    GRAPHIC = 'GRAPHIC', // 图文\n    LINK = 'LINK', // 链接\n}\n\nexport enum MESSAGE_STATUS {\n    LOADING = 'LOADING',\n    SENT =  'SENT',\n    FAILED = 'FAILED',\n    READ = 'READ'\n}\n\nexport enum ROLE {\n    SENDER = 'SENDER',\n    RECEIVER = 'RECEIVER',\n    SYSTEM = 'SYSTEM'\n}\n\nexport const generateTextMessage = (content) => {\n    return {\n        id: Math.ceil(Math.random() * 100000),\n        content,\n        role: ROLE.SENDER,\n        type: MESSAGE_TYPE.TEXT,\n        author: {\n            name: 'Zhalice'\n        }\n    }\n}\n","import React, { ReactElement } from 'react'\nimport { IMessage } from './type'\n\n\nexport default function MSGImage (props: IMessage): ReactElement {\n    const { url } = props\n\n    return (\n        <div>\n            <img style={{ width: '100%' }} src={url}/>\n        </div>\n    )\n}\n","import React, { ReactElement } from 'react'\nimport styled from 'styled-components'\nimport { IMessage } from './type'\n\n\nconst Wrapper = styled.section`\n`;\n\nfunction isUrl(URL) {\n    var str = URL;\n    //判断URL地址的正则表达式为:http(s)?://([\\w-]+\\.)+[\\w-]+(/[\\w- ./?%&=]*)?\n    //下面的代码中应用了转义字符\"\\\"输出一个字符\"/\"\n    var Expression = /http(s)?:\\/\\/([\\w-]+\\.)+[\\w-]+(\\/[\\w- .\\/?%&=]*)?/;\n    var objExp = new RegExp(Expression);\n    if (objExp.test(str) == true) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconst reg = /(http:\\/\\/|https:\\/\\/)((\\w|=|\\?|\\.|\\/|&|-)+)/g\n\nexport default function MSGText (props: IMessage): ReactElement {\n    const { content } = props\n    if (!content) return null\n    console.log(\"content\", content)\n    const a = content.replace(reg, \"@$@$1$2@$@\")\n    console.log(\"content\", a)\n    const array = a.split('@$@')\n    console.log(array)\n    return (\n        <Wrapper>\n            {array.map((v, index) => {\n                if (isUrl(v)) return <a href={`${v}`} style={{ margin: '0 3px', color: '#00A2FF', cursor: 'pointer' }} key={index}>{v}</a>\n                return <span key={index}>{v}</span>\n            })}\n        </Wrapper>\n    )\n}\n","import React, { ReactElement } from 'react'\n\ninterface IProps {\n}\n\nexport default function MSGLink (props: IProps): ReactElement {\n    const {  } = props\n\n    return (\n        <div className=\"flex1\"></div>\n    )\n}\n","import React, { ReactElement } from 'react'\nimport { IMessage } from './type'\n\n\nexport default function MSGVideo (props: IMessage): ReactElement {\n    const { url } = props\n\n    return (\n        <div>\n            <video src={url} controls/>\n        </div>\n    )\n}\n","import React, { ReactElement } from 'react'\nimport { IMessage } from './type'\n\n\nexport default function MSGSystemNotification (props: IMessage): ReactElement {\n    const { content } = props\n\n    return (\n        <div className=\"flex1\">\n            {content}\n        </div>\n    )\n}\n","import styled from 'styled-components'\n\nconst SystemWrapper = styled.div`\n    color: #A6A6A6;\n    font-size: 12px;\n`\n\nconst ReceiverWrapper = styled.div`\n    border-radius: 4px;\n    padding: 10px;\n    max-width: 80%;\n    position: relative;\n    background-color: #fff;\n    width: fit-content;\n    margin-left: 10px;\n    overflow: hidden;\n\n    &:before {\n        content: \"\";\n        border-width: 6px;\n        border-style: solid;\n        border-color: transparent;\n        position: absolute;\n        top: 10px;\n        border-right-color: #fff;\n        left: -12px;\n    }\n`\n\nconst SenderWrapper = styled.div`\n    border-radius: 4px;\n    padding: 10px;\n    max-width: 80%;\n    position: relative;\n    width: fit-content;\n    background-color: #95ec69;\n    margin-right: 10px;\n    overflow: hidden;\n\n    &:before {\n        content: \"\";\n        border-width: 6px;\n        border-style: solid;\n        border-color: transparent;\n        position: absolute;\n        top: 10px;\n        border-left-color: #95ec69;\n        right: -12px;\n    }\n`\n\nexport { SystemWrapper, ReceiverWrapper, SenderWrapper }\n","import React, { ReactElement } from 'react'\nimport { IMessage } from '../messages/type'\nimport styled from 'styled-components'\n\nconst Wrapper = styled.div`\n\n`;\n\nexport default function Avatar (props: IMessage): ReactElement {\n    const { author } = props\n    const bgStyle = author.thumbnail ? {} :  { background: '#fff' }\n\n    return (\n        <Wrapper>\n            <div className=\"row-flex-center jc-center\" style={{ height: 50, width: 50, borderRadius: '5px', ...bgStyle }}>\n                { author.thumbnail ? <img src={author.thumbnail}/> : author.name.substring(0, 1) }\n            </div>\n        </Wrapper>\n    )\n}\n","import React, { ReactElement } from 'react'\nimport styled from 'styled-components'\nimport { getTargetMsgClass, getTargetWrapper, getTargetWrapperCls } from '../messages/index'\nimport { ROLE } from '../../constants/message'\nimport { IMessage } from './type'\nimport Avatar from '../common/Avatar'\n\n\nexport default function MSGContainer (message: IMessage): ReactElement {\n    const TargetMsgClass = getTargetMsgClass(message)\n    const TargetWrapper = getTargetWrapper(message)\n    const { role } = message\n    const cls = getTargetWrapperCls(message)\n    return (\n        <div className={`row-flex-baseline ${cls}`} style={{ marginBottom: 10 }}>\n            {role === ROLE.RECEIVER && <Avatar {...message}/>}\n            <TargetWrapper>\n                <TargetMsgClass {...message} />\n            </TargetWrapper>\n            {role === ROLE.SENDER && <Avatar {...message}/>}\n        </div>\n    )\n}\n\n\n\n","import { MESSAGE_STATUS, MESSAGE_TYPE, MESSAGE_ADDON_TYPE, ROLE  } from '../../constants/message'\nimport MSGImage from './MSGImage'\nimport MSGText  from './MSGText'\nimport MSGLink  from './MSGLink'\nimport MSGVideo from './MSGVideo'\nimport MSGSystemNotification from './MSGSystemNotification'\nimport { SystemWrapper, ReceiverWrapper, SenderWrapper } from './MSGStyleWrapper'\n\nimport { IMessage  } from './type'\n\nexport function getTargetMsgClass (msg: IMessage): TSFixMe {\n    const { type, model } = msg\n    switch (type) {\n        case MESSAGE_TYPE.TEXT: return MSGText\n        case MESSAGE_TYPE.IMAGE: return MSGImage\n        case MESSAGE_TYPE.SYSTEM: return MSGSystemNotification\n        case MESSAGE_TYPE.VIDEO: return MSGVideo\n        case MESSAGE_TYPE.MODEL: { // 特殊的在这里进行扩展\n            const modelType = model && model.modelType\n            switch (modelType) {\n                case MESSAGE_ADDON_TYPE.GRAPHIC: return MSGLink\n            }\n        }\n        default: return MSGText\n    }\n}\n\n\nexport function getTargetWrapper (msg: IMessage): TSFixMe {\n    const { role } = msg\n    switch (role) {\n        case ROLE.SYSTEM: return SystemWrapper\n        case ROLE.RECEIVER: return ReceiverWrapper\n        case ROLE.SENDER: return SenderWrapper\n        default: return SystemWrapper\n    }\n}\n\nexport function getTargetWrapperCls (msg: IMessage): TSFixMe {\n    const { role } = msg\n    switch (role) {\n        case ROLE.SYSTEM: return 'jc-center'\n        case ROLE.RECEIVER: return 'jc-start'\n        case ROLE.SENDER: return 'jc-end'\n        default: return 'jc-center'\n    }\n}\n","import React, { ReactElement } from 'react'\nimport { IMessage } from '../messages/type'\nimport MSGContainer from '../messages/MSGContainer'\nimport { getTargetMsgClass } from '../messages/index'\n\ninterface IProps {\n    messages: Array<IMessage>\n}\n\nexport default function WeChatPanelContent (props: IProps): ReactElement {\n    const { messages } = props\n\n    return (\n        <>\n            {messages.map(message => {\n                return <MSGContainer key={`${message.id}`} {...message} />\n            })}\n        </>\n    )\n}\n","import React, { ReactElement } from 'react'\n\ninterface IProps {\n    name?: string\n    style?: React.CSSProperties\n}\n\nexport default function Icon (props: IProps): ReactElement {\n    const {  name, style } = props\n\n    return (\n        <i className={`iconfont fg-${name}`} style={style}></i>\n    )\n}\n","import React, { ReactElement } from 'react'\n\ninterface IProps {\n    name?: string\n    style?: React.CSSProperties\n    value: string\n    onChange: TSFixMe\n    onPressEnter: TSFixMe\n}\n\nexport default function Input (props: IProps): ReactElement {\n    const { onPressEnter, ...restProps } = props\n    const onKeyPress = (e) => {\n        if (e.key === 'Enter') {\n            onPressEnter(e.target.value)\n        }\n    }\n\n    return (\n        <input {...restProps} onKeyPress={onKeyPress}/>\n    )\n}\n","\nimport React, { ReactElement, useState } from 'react'\nimport styled from 'styled-components'\n\nimport Icon from '../common/Icon'\nimport Text from '../common/Text'\nimport Input from '../common/Input'\nimport { generateTextMessage } from '../../constants/message'\n\ninterface IProps {\n    onAddMessage: TSFixMe\n}\n\nconst Wrapper = styled.section`\n    height: 40px;\n    border-top: 1px solid #ddd;\n    padding: 0 20px 0 15px;\n    background: #F6F6F6;\n`;\n\nexport default function WeChatPanelFooter (props: IProps): ReactElement {\n    const { onAddMessage } = props\n    const [ content, setContent] = useState('')\n    const onChange = (e) => {\n        setContent(e.target.value)\n    }\n    const onPressEnter = (value) => {\n        onAddMessage(generateTextMessage(value))\n        setContent('')\n    }\n\n    return (\n        <Wrapper>\n            <div className=\"row-flex-center\" style={{ height: '100%' }}>\n                <Icon name=\"run_task\" />\n                <div className=\"row-flex-center jc-center flex1\" style={{ margin: '0 10px' }}>\n                    <Input value={content} style={{ width: '100%' }} onChange={onChange} onPressEnter={onPressEnter} />\n                </div>\n                <Icon name=\"member\" style={{ marginRight: 10 }} />\n                <Icon name=\"add_item\" />\n            </div>\n        </Wrapper>\n    )\n}\n","import React, { ReactElement } from 'react'\n\ninterface IProps {\n    className?: string\n    style?: React.CSSProperties\n    children?: ReactElement | any\n}\n\nexport default function Text (props: IProps): ReactElement {\n    const {  className, style, children } = props\n    \n\n    return (\n        <div className={className} style={style}>{children}</div>\n    )\n}\n","\nimport React, { ReactElement } from 'react'\nimport styled from 'styled-components'\n\nimport Icon from '../common/Icon'\nimport Text from '../common/Text'\n\ninterface IProps {\n    name: string\n}\n\nconst Wrapper = styled.section`\n    height: 40px;\n    border-bottom: 1px solid #D5D5D5;\n    padding: 0 20px 0 15px;\n`;\n\nexport default function WeChatPanelTitle (props: IProps): ReactElement {\n    const {  name } = props\n\n    return (\n        <Wrapper>\n            <div className=\"row-flex-center\" style={{ height: '100%' }}>\n                <Icon name=\"arrow_left\" />\n                <div className=\"row-flex-center jc-center flex1\">\n                    <Text>{name}</Text>\n                </div>\n                <Icon name=\"more\" />\n            </div>\n        </Wrapper>\n    )\n}\n","import { ROLE, MESSAGE_TYPE, MESSAGE_STATUS } from \"../constants/message\";\n\n\nconst messages = [\n    {\n        id: 1,\n        content: \"hello world\",\n        role: ROLE.SENDER,\n        type: MESSAGE_TYPE.TEXT,\n        author: {\n            name: 'Zhalice'\n        }\n    },\n    {\n        id: 2,\n        content: \"hello, https://www.ringcentral.com\",\n        role: ROLE.RECEIVER,\n        type: MESSAGE_TYPE.TEXT,\n        status: MESSAGE_STATUS.LOADING,\n        author: {\n            name: 'Claire',\n        }\n    },\n    {\n        id: 3,\n        url: 'https://pic2.zhimg.com/v2-59540e83a77fc9148bd967b83af0d19c_r.jpg?source=172ae18b',\n        role: ROLE.RECEIVER,\n        type: MESSAGE_TYPE.IMAGE,\n        status: MESSAGE_STATUS.FAILED,\n        author: {\n            name: 'Zhalice'\n        }\n    },\n    {\n        id: 4,\n        url: 'https://youtu.be/r09vPFM0RVM',\n        upvote: 0,\n        downvote: 0,\n        role: ROLE.RECEIVER,\n        type: MESSAGE_TYPE.VIDEO,\n        author: {\n            name: 'Zhalice'\n        }\n    },\n    {\n        id: 5,\n        title: \"Upvote Me\",\n        desc: \"This behaviour is only supported within the context of Styled Components\",\n        upvote: 0,\n        downvote: 0,\n        content: '你拍了拍 \"Claire\" ',\n        role: ROLE.SYSTEM,\n        type: MESSAGE_TYPE.SYSTEM,\n        author: {\n            name: 'Zhalice'\n        }\n    },\n    {\n        id: 6,\n        title: \"Upvote Me\",\n        desc: \"This behaviour is only supported within the context of Styled Components\",\n        upvote: 0,\n        downvote: 0,\n        content: '你拍了拍自己',\n        role: ROLE.SYSTEM,\n        type: MESSAGE_TYPE.SYSTEM,\n        author: {\n            name: 'Zhalice'\n        }\n    },\n    {\n        id: 7,\n        title: \"Upvote Me\",\n        desc: \"This behaviour is only supported within the context of Styled Components\",\n        upvote: 0,\n        downvote: 0,\n        content: '\"Claire\" 拍了拍你 ',\n        role: ROLE.SYSTEM,\n        type: MESSAGE_TYPE.SYSTEM,\n        author: {\n            name: 'Zhalice'\n        }\n    }\n];\n\nexport default messages\n","import React, { ReactElement, useState, useRef } from 'react'\nimport styled from 'styled-components'\n\nimport WeChatPanelContent from './WeChatPanelContent'\nimport WeChatPanelFooter from './WeChatPanelFooter'\nimport WeChatPanelTitle from './WeChatPanelTitle'\n\nimport mockData from '../../mock/mockData'\n\ninterface IProps {\n\n}\n\nconst Wrapper = styled.section`\n    height: 667px;\n    width: 375px;\n    margin: 20px auto;\n    background-color: #EDEDED;\n`;\n\nexport default function WeChatPanel (props: IProps): ReactElement {\n    const {  } = props\n    const [ messages, setMessages ] = useState(mockData)\n    const contentRef = useRef(null)\n\n    const onAddMessage = (msg) => {\n        setMessages(messages.concat([ msg ]))\n        setTimeout(() => {\n            contentRef.current.scrollTop = contentRef.current.scrollHeight\n        })\n    }\n\n    return (\n        <Wrapper>\n            <div className=\"column-flex\" style={{ height: '100%' }}>\n                <WeChatPanelTitle name=\"Claire\"/>\n                <div ref={contentRef} className=\"flex1\" style={{ padding: '5px 10px', overflowY: 'auto' }}>\n                    <WeChatPanelContent messages={messages}/>\n                </div>\n                <WeChatPanelFooter onAddMessage={onAddMessage} />\n            </div>\n        </Wrapper>\n    )\n}\n","import React from 'react';\nimport './App.css';\nimport WeChatPanel from './components/wechat-panel/WeChatPanel'\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <WeChatPanel />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './styles/utility.css';\nimport './font/iconfont.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}